; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=vc16 -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VC16I %s

; This test checks that LLVM can do basic stripping and reapplying of branches
; to basic blocks.

declare void @test_true()
declare void @test_false()

; !0 corresponds to a branch being taken, !1 to not being takne.
!0 = !{!"branch_weights", i16 64, i16 4}
!1 = !{!"branch_weights", i16 4, i16 64}

define void @test_bcc_fallthrough_taken(i16 %in) nounwind {
; VC16I-LABEL: test_bcc_fallthrough_taken:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    lea sp, sp, -2
; VC16I-NEXT:    sw ra, 0(sp)
; VC16I-NEXT:    lui a2, 1
; VC16I-NEXT:    lea a2, a2, 10
; VC16I-NEXT:    cmp a0, a2
; VC16I-NEXT:    bnz .LBB0_3
; VC16I-NEXT:  ; %bb.1: ; %true
; VC16I-NEXT:    lui a2, %his(test_true)
; VC16I-NEXT:    lea ra, a2, %lo(test_true)
; VC16I-NEXT:  .LBB0_2: ; %true
; VC16I-NEXT:    ret
; VC16I-NEXT:    lw ra, 0(sp)
; VC16I-NEXT:    lea sp, sp, 2
; VC16I-NEXT:    ret
; VC16I-NEXT:  .LBB0_3: ; %false
; VC16I-NEXT:    lui a2, %his(test_false)
; VC16I-NEXT:    lea ra, a2, %lo(test_false)
; VC16I-NEXT:    j .LBB0_2
  %tst = icmp eq i16 %in, 42
  br i1 %tst, label %true, label %false, !prof !0

; Expected layout order is: Entry, TrueBlock, FalseBlock
; Entry->TrueBlock is the common path, which should be taken whenever the
; conditional branch is false.

true:
  call void @test_true()
  ret void

false:
  call void @test_false()
  ret void
}

define void @test_bcc_fallthrough_nottaken(i16 %in) nounwind {
; VC16I-LABEL: test_bcc_fallthrough_nottaken:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    lea sp, sp, -2
; VC16I-NEXT:    sw ra, 0(sp)
; VC16I-NEXT:    lui a2, 1
; VC16I-NEXT:    lea a2, a2, 10
; VC16I-NEXT:    cmp a0, a2
; VC16I-NEXT:    bz .LBB1_3
; VC16I-NEXT:  ; %bb.1: ; %false
; VC16I-NEXT:    lui a2, %his(test_false)
; VC16I-NEXT:    lea ra, a2, %lo(test_false)
; VC16I-NEXT:  .LBB1_2: ; %true
; VC16I-NEXT:    ret
; VC16I-NEXT:    lw ra, 0(sp)
; VC16I-NEXT:    lea sp, sp, 2
; VC16I-NEXT:    ret
; VC16I-NEXT:  .LBB1_3: ; %true
; VC16I-NEXT:    lui a2, %his(test_true)
; VC16I-NEXT:    lea ra, a2, %lo(test_true)
; VC16I-NEXT:    j .LBB1_2
  %tst = icmp eq i16 %in, 42
  br i1 %tst, label %true, label %false, !prof !1

; Expected layout order is: Entry, FalseBlock, TrueBlock
; Entry->FalseBlock is the common path, which should be taken whenever the
; conditional branch is false

true:
  call void @test_true()
  ret void

false:
  call void @test_false()
  ret void
}

