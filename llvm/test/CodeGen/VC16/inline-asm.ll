; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=vc16 -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=VC16I %s

@gi = external global i16

define i16 @constraint_r(i16 %a) {
; VC16I-LABEL: constraint_r:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    ;APP
; VC16I-NEXT:    add a0, a0
; VC16I-NEXT:    ;NO_APP
; VC16I-NEXT:    jalr ra, 0
  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "add $0, $1", "=r,r"(i16 %a)
  ret i16 %2
}

define i16 @constraint_i(i16 %a) {
; VC16I-LABEL: constraint_i:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    ;APP
; VC16I-NEXT:    addi a0, 11
; VC16I-NEXT:    ;NO_APP
; VC16I-NEXT:    jalr ra, 0
  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "addi $0, $1", "=r,i"(i16 11)
  ret i16 %2
}

define void @constraint_m(i16* %a) {
; VC16I-LABEL: constraint_m:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    ;APP
; VC16I-NEXT:    ;NO_APP
; VC16I-NEXT:    jalr ra, 0
  call void asm sideeffect "", "=*m"(i16* %a)
  ret void
}

define i16 @constraint_m2(i16* %a) {
; VC16I-LABEL: constraint_m2:
; VC16I:       ; %bb.0:
; VC16I-NEXT:    ;APP
; VC16I-NEXT:    lw a0, 0(a0)
; VC16I-NEXT:    ;NO_APP
; VC16I-NEXT:    jalr ra, 0
  %1 = tail call i16 asm "lw $0, $1", "=r,*m"(i16* %a) nounwind
  ret i16 %1
}

; TODO: expend tests for more complex constraints, out of range immediates etc
