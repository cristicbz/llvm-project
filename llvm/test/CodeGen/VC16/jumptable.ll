; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=vc16 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=VC16I

define void @jt(i16 %in, i16* %out) {
; VC16I-LABEL: jt:
; VC16I:       ; %bb.0: ; %entry
; VC16I-NEXT:    sw      s0, 0(s1)
; VC16I-NEXT:    lli     t0, 1
; VC16I-NEXT:    lli     a2, 2
; VC16I-NEXT:    cmp     a2, a0
; VC16I-NEXT:    blt     .LBB0_2
; VC16I-NEXT:  ; %bb.1:                                ; %entry
; VC16I-NEXT:    lli     t0, 0
; VC16I-NEXT:  .LBB0_2:                                ; %entry
; VC16I-NEXT:    addi    t0, 0
; VC16I-NEXT:    bnz     .LBB0_9
; VC16I-NEXT:    j       .LBB0_3
; VC16I-NEXT:  .LBB0_3:                                ; %entry
; VC16I-NEXT:    lli     t0, 1
; VC16I-NEXT:    cmp     a0, t0
; VC16I-NEXT:    bz      .LBB0_5
; VC16I-NEXT:  ; %bb.4:                                ; %entry
; VC16I-NEXT:    lli     t0, 0
; VC16I-NEXT:  .LBB0_5:                                ; %entry
; VC16I-NEXT:    addi    t0, 0
; VC16I-NEXT:    bnz     .LBB0_15
; VC16I-NEXT:    j       .LBB0_6
; VC16I-NEXT:  .LBB0_6:                                ; %entry
; VC16I-NEXT:    lli     t0, 1
; VC16I-NEXT:    cmp     a0, a2
; VC16I-NEXT:    bz      .LBB0_8
; VC16I-NEXT:  ; %bb.7:                                ; %entry
; VC16I-NEXT:    lli     t0, 0
; VC16I-NEXT:  .LBB0_8:                                ; %entry
; VC16I-NEXT:    addi    t0, 0
; VC16I-NEXT:    bnz     .LBB0_16
; VC16I-NEXT:    j       .LBB0_19
; VC16I-NEXT:  .LBB0_16:                               ; %bb2
; VC16I-NEXT:    lli     a0, 3
; VC16I-NEXT:    sw      a0, 0(a1)
; VC16I-NEXT:    j       .LBB0_19
; VC16I-NEXT:  .LBB0_9:                                ; %entry
; VC16I-NEXT:    lli     t0, 1
; VC16I-NEXT:    lli     s0, 3
; VC16I-NEXT:    cmp     a0, s0
; VC16I-NEXT:    bz      .LBB0_11
; VC16I-NEXT:  ; %bb.10:                               ; %entry
; VC16I-NEXT:    lli     t0, 0
; VC16I-NEXT:  .LBB0_11:                               ; %entry
; VC16I-NEXT:    addi    t0, 0
; VC16I-NEXT:    bnz     .LBB0_17
; VC16I-NEXT:    j       .LBB0_12
; VC16I-NEXT:  .LBB0_12:                               ; %entry
; VC16I-NEXT:    lli     a2, 1
; VC16I-NEXT:    lli     t0, 4
; VC16I-NEXT:    cmp     a0, t0
; VC16I-NEXT:    bz      .LBB0_14
; VC16I-NEXT:  ; %bb.13:                               ; %entry
; VC16I-NEXT:    lli     a2, 0
; VC16I-NEXT:  .LBB0_14:                               ; %entry
; VC16I-NEXT:    addi    a2, 0
; VC16I-NEXT:    bnz     .LBB0_18
; VC16I-NEXT:    j       .LBB0_19
; VC16I-NEXT:  .LBB0_18:                               ; %bb4
; VC16I-NEXT:    lli     a0, 1
; VC16I-NEXT:    sw      a0, 0(a1)
; VC16I-NEXT:  .LBB0_19:                               ; %exit
; VC16I-NEXT:    lw      s0, 0(s1)
; VC16I-NEXT:    jalr    t0, ra, 0
; VC16I-NEXT:  .LBB0_15:                               ; %bb1
; VC16I-NEXT:    lli     a0, 4
; VC16I-NEXT:    sw      a0, 0(a1)
; VC16I-NEXT:    j       .LBB0_19
; VC16I-NEXT:  .LBB0_17:                               ; %bb3
; VC16I-NEXT:    sw      a2, 0(a1)
; VC16I-NEXT:    j       .LBB0_19
entry:
  switch i16 %in, label %exit [
    i16 1, label %bb1
    i16 2, label %bb2
    i16 3, label %bb3
    i16 4, label %bb4
  ]
bb1:
  store i16 4, i16* %out
  br label %exit
bb2:
  store i16 3, i16* %out
  br label %exit
bb3:
  store i16 2, i16* %out
  br label %exit
bb4:
  store i16 1, i16* %out
  br label %exit
exit:
  ret void
}
