; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=vc16 -O3 -verify-machineinstrs -debug < %s \
; RUN:   | FileCheck -check-prefix=VC16I %s

define i8* @mPutLine(i16 %charX, i8* readonly %text) {
; VC16I-LABEL: mPutLine:
; VC16I:       ; %bb.0: ; %entry
; VC16I-NEXT:    lui a2, 1
; VC16I-NEXT:    lea a2, a2, 7
; VC16I-NEXT:    cmp a2, a0
; VC16I-NEXT:    bnc .LBB0_9
; VC16I-NEXT:  ; %bb.1: ; %while.body.preheader
; VC16I-NEXT:    lb a2, 0(a1)
; VC16I-NEXT:    cmpi a2, 0
; VC16I-NEXT:    bz .LBB0_11
; VC16I-NEXT:  .LBB0_2: ; %for.body.preheader
; VC16I-NEXT:    ; =>This Loop Header: Depth=1
; VC16I-NEXT:    ; Child Loop BB0_4 Depth 2
; VC16I-NEXT:    mv a2, a0
; VC16I-NEXT:    ori a2, -4
; VC16I-NEXT:    lea a1, a1, 1
; VC16I-NEXT:    j .LBB0_4
; VC16I-NEXT:  .LBB0_3: ; %for.cond
; VC16I-NEXT:    ; in Loop: Header=BB0_4 Depth=2
; VC16I-NEXT:    cmpi t0, 0
; VC16I-NEXT:    bnz .LBB0_7
; VC16I-NEXT:  .LBB0_4: ; %for.body
; VC16I-NEXT:    ; Parent Loop BB0_2 Depth=1
; VC16I-NEXT:    ; => This Inner Loop Header: Depth=2
; VC16I-NEXT:    mv t0, a2
; VC16I-NEXT:    lui a2, 1
; VC16I-NEXT:    lea a2, a2, 8
; VC16I-NEXT:    lea a0, a0, 1
; VC16I-NEXT:    cmp a0, a2
; VC16I-NEXT:    bc .LBB0_8
; VC16I-NEXT:  ; %bb.5: ; %for.cond
; VC16I-NEXT:    ; in Loop: Header=BB0_4 Depth=2
; VC16I-NEXT:    lea a2, t0, 1
; VC16I-NEXT:    cmp a2, t0
; VC16I-NEXT:    lli t0, 1
; VC16I-NEXT:    bnc .LBB0_3
; VC16I-NEXT:  ; %bb.6: ; %for.cond
; VC16I-NEXT:    ; in Loop: Header=BB0_4 Depth=2
; VC16I-NEXT:    lli t0, 0
; VC16I-NEXT:    j .LBB0_3
; VC16I-NEXT:  .LBB0_7: ; %cleanup10
; VC16I-NEXT:    ; in Loop: Header=BB0_2 Depth=1
; VC16I-NEXT:    lli a2, 4
; VC16I-NEXT:    sw a0, 0(a2)
; VC16I-NEXT:    lb a2, 0(a1)
; VC16I-NEXT:    cmpi a2, 0
; VC16I-NEXT:    lli a2, 0
; VC16I-NEXT:    bnz .LBB0_2
; VC16I-NEXT:    j .LBB0_10
; VC16I-NEXT:  .LBB0_8: ; %cleanup10.thread
; VC16I-NEXT:    lli a0, 4
; VC16I-NEXT:    sw a2, 0(a0)
; VC16I-NEXT:  .LBB0_9: ; %return
; VC16I-NEXT:    mv a2, a1
; VC16I-NEXT:  .LBB0_10: ; %return
; VC16I-NEXT:    mv a0, a2
; VC16I-NEXT:    ret
; VC16I-NEXT:  .LBB0_11:
; VC16I-NEXT:    lli a0, 0
; VC16I-NEXT:    ret
entry:
  %cmp26 = icmp ult i16 %charX, 40
  br i1 %cmp26, label %while.body.preheader, label %return

while.body.preheader:                             ; preds = %entry
  %0 = load i8, i8* %text, align 1
  %cmp138 = icmp eq i8 %0, 0
  br i1 %cmp138, label %return, label %for.body.preheader

for.body.preheader:                               ; preds = %while.body.preheader, %cleanup10
  %text.pn = phi i8* [ %incdec.ptr40, %cleanup10 ], [ %text, %while.body.preheader ]
  %charX.addr.02839 = phi i16 [ %inc, %cleanup10 ], [ %charX, %while.body.preheader ]
  %incdec.ptr40 = getelementptr inbounds i8, i8* %text.pn, i16 1
  %and = and i16 %charX.addr.02839, 3
  %sub = sub nuw nsw i16 4, %and
  br label %for.body

for.cond:                                         ; preds = %for.body
  %exitcond.not = icmp eq i16 %inc9, %sub
  br i1 %exitcond.not, label %cleanup10, label %for.body

for.body:                                         ; preds = %for.cond, %for.body.preheader
  %iSpace.024 = phi i16 [ %inc9, %for.cond ], [ 0, %for.body.preheader ]
  %charX.addr.123 = phi i16 [ %inc, %for.cond ], [ %charX.addr.02839, %for.body.preheader ]
  %inc = add i16 %charX.addr.123, 1
  %cmp5 = icmp ugt i16 %inc, 39
  %inc9 = add nuw nsw i16 %iSpace.024, 1
  br i1 %cmp5, label %cleanup10.thread, label %for.cond

cleanup10.thread:                                 ; preds = %for.body
  store volatile i16 40, i16* inttoptr (i16 4 to i16*), align 4
  br label %return

cleanup10:                                        ; preds = %for.cond
  store volatile i16 %inc, i16* inttoptr (i16 4 to i16*), align 4
  %1 = load i8, i8* %incdec.ptr40, align 1
  %cmp1 = icmp eq i8 %1, 0
  br i1 %cmp1, label %return, label %for.body.preheader

return:                                           ; preds = %cleanup10, %while.body.preheader, %cleanup10.thread, %entry
  %retval.2 = phi i8* [ %text, %entry ], [ %incdec.ptr40, %cleanup10.thread ], [ null, %while.body.preheader ], [ null, %cleanup10 ]
  ret i8* %retval.2
}
