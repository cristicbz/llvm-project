//===-- VC16Subtarget.h - Define Subtarget for the VC16 ---------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the VC16 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_VC16_VC16SUBTARGET_H
#define LLVM_LIB_TARGET_VC16_VC16SUBTARGET_H

#include "VC16FrameLowering.h"
#include "VC16ISelLowering.h"
#include "VC16InstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "VC16GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class VC16Subtarget : public VC16GenSubtargetInfo {
  virtual void anchor();
  VC16FrameLowering FrameLowering;
  VC16InstrInfo InstrInfo;
  VC16RegisterInfo RegInfo;
  VC16TargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;

  /// Initializes using the passed in CPU and feature strings so that we can
  /// use initializer lists for subtarget initialization.
  VC16Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

public:
  // Initializes the data members to match that of the specified triple.
  VC16Subtarget(const Triple &TT, StringRef CPU,
                 StringRef FS, const TargetMachine &TM);

  // Parses features string setting specified subtarget options. The
  // definition of this function is auto-generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  const VC16FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const VC16InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const VC16RegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }
  const VC16TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
};
} // End llvm namespace

#endif
